<?xml version="1.0" encoding="UTF-8"?>
<project 
	default	= "init" 
	basedir	= "." 
	name	= "admaDIC Spiromat"
>
	<description>Spiromat Project for admaDIC GbR</description>

    <property file="${basedir}/build.version.properties" />
    <property file="${basedir}/build.default.properties" />

    <path id="classpath.main">
        <pathelement location="${build.main.dir}" /> 
    	<pathelement location="${lib.skinlf.jar}" /> 
    	<pathelement location="${lib.forms.jar}" /> 

    	<pathelement location="${lib.nanoxml.jar}" />
    	<pathelement location="${lib.commons-io.jar}" /> 
    	<pathelement location="${lib.commons-lang.jar}" /> 
    	<pathelement location="${lib.batik-dom.jar}" /> 
    	<pathelement location="${lib.batik-svggen.jar}" /> 
    	<pathelement location="${lib.batik-awt-util.jar}" />
    	<pathelement location="${lib.batik-util.jar}" /> 

    	<pathelement location="${lib.junit3.jar}" />
    </path>

    <path id="classpath.tests">
        <pathelement location="${build.main.dir}" /> 
        <pathelement location="${build.test.dir}" /> 
    	<pathelement location="${lib.skinlf.jar}" /> 
    	<pathelement location="${lib.forms.jar}" /> 

    	<pathelement location="${lib.junit3.jar}" />
    </path>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="clean.dist">
		<delete dir="${dist.root.dir}" />
	</target>

	<target
		name="all"
		depends="init,compile,dist.jar" 
	>
	</target>

	<target name="init" description="Initialize build process">
        <tstamp>
			<!-- <format property="DATE" pattern="yyyy-MM-dd hh:mm:ss" /> -->
        </tstamp>
        
		<mkdir dir="${build.main.dir}" />
        <mkdir dir="${build.test.dir}" />
        <mkdir dir="${build.res2.dir}" />
        <mkdir dir="${build.reports.dir}"/>
   		<mkdir dir="${dist.dir}" />

		<available
            property="junit.task.present"
            classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
        />
        <available
            property="junit.jar.present"
            file="${lib.junit3.jar}"
        />

		<echo>
			Use target dist.jar to build a jar file, which can be run standalone.
		</echo>
	</target>

	<target 
		name="compile" 
		depends="init,compile.main,compile.tests" 
		description="Compiles the project"
	>
	</target>

	<target 
		name="compile.main" 
		depends="init"
		description="Compiles the main sources of the project"
	>
		<javac 
			debug		 ="${javac.debug}"
			srcdir       ="${src.main.dir}" 
			destdir      ="${build.main.dir}"
			classpathref ="classpath.main"
		>
		</javac>

		<copy todir="${build.main.dir}">
			<fileset dir="${src.main.dir}">
				<exclude name="**/.svn" />
				<exclude name="**/*.java" />
				<exclude name="**/*.tmpl" />
			</fileset>
			<fileset dir="${src.res.dir}">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

		<copy todir="${build.res2.dir}">
			<fileset dir="${src.res2.dir}">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
	</target>

	<target 
		name="compile.tests" 
		depends="init"
		if="junit.jar.present"
        description="Compiles the unit tests." 
	>
		<javac 
			debug		= "${javac.debug}"
			srcdir       ="${src.test.dir}" 
			destdir      ="${build.test.dir}"
			classpathref ="classpath.tests" 
		/>
	</target>	

	<target 
		name="test" 
		depends="compile.tests" 
		if="junit.task.present"
	    description="Runs the unit tests." 
	>
        <junit 
        	printsummary="yes" 
        	haltonfailure="no" 
        >
            <classpath refid="classpath.tests"/>
            <formatter type="plain" />
            <batchtest fork="yes" todir="${build.reports.dir}">
                <fileset 
                	dir="${src.test.dir}" 
                	includes="**/*Test.java" 
                />
            </batchtest>
        </junit>
	</target>

	<target
		name="dist.jar" 
		depends="compile"
	    description="Creates the distribution files" 
	>
		<!-- create a class path with all redistributable jars from lib: -->
		<path id="mf.class.path" >
			<fileset dir="${lib.dir}" >
				<include name="lib/*.jar" />
			</fileset>
		</path>
		<!-- create a property with the full path to the lib dir: -->
		<path id="path.src.ins.files.dir" location="${src.ins.files.dir}" >
		</path>
		<pathconvert
			property="p.src.ins.files.dir"
			dirsep="/"
			pathsep=" "
			refid="path.src.ins.files.dir"
		>
		</pathconvert>
		<!-- 
			from all the redistributable jar files convert from 
			absolute to relative path: 
		-->
		<pathconvert 
			property="p.mf.class.path" 
			dirsep="/" 
			pathsep=" "
			refid="mf.class.path"
		>
			<filtermapper>
				<!-- first replace backslash with slash, then strip the absolute prefix: -->
				<replacestring from="\" to="/"/>
				<replacestring from="${p.src.ins.files.dir}/" to="./"/>
			</filtermapper>
		</pathconvert>
		<basename file="${dist.res2.jar}" property="p.dist.res2.jar" />
		<property name="p2.mf.class.path" value="./lib/${p.dist.res2.jar} ${p.mf.class.path}" />
		<jar 
			destfile="${dist.main.bare.jar}"
		>
			<fileset dir="${build.main.dir}/" includes="**/*">
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Rainer Schwarze"/>
				<attribute name="Main-Class" value="${app.main.class}"/>
				<attribute name="Class-Path" value="${p2.mf.class.path}"/>
			</manifest>
		</jar>

		<jar 
			destfile="${dist.res2.jar}" 
		>
			<fileset dir="${build.res2.dir}/" includes="**/*">
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Rainer Schwarze"/>
			</manifest>
		</jar>

		<jar 
			destfile="${dist.main.jar}"
		>
			<fileset dir="${build.main.dir}/" includes="**/*">
			</fileset>
			<zipfileset src="${dist.res2.jar}" />
			<zipfileset src="${lib.forms.jar}" />
			<zipfileset src="${lib.nanoxml.jar}" />
			<zipfileset src="${lib.commons-io.jar}" />
			<zipfileset src="${lib.commons-lang.jar}" />
			<zipfileset src="${lib.skinlf.jar}" />
			<zipfileset src="${lib.batik-svggen.jar}" />
			<zipfileset src="${lib.batik-dom.jar}" />
			<zipfileset src="${lib.batik-awt-util.jar}" />

			<manifest>
				<attribute name="Built-By" value="Rainer Schwarze"/>
				<attribute name="Main-Class" value="${app.main.class}"/>
			</manifest>
		</jar>
	</target>
</project>
